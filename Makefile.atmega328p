# Name of this project, final target

NAME := demo

PART := atmega328p

AVRDUDE_OPTS := -p m328p -c xplainedmini
# Use avrdude -p \? to get a list of known parts

# Where should we put object and dependency files?
# This directory is deleted by "make clean"
OBJ_DIR := obj/

# Get application version number

NK_VERSION_MAJOR := $(shell cat VERSION_MAJOR)
NK_VERSION_MINOR := $(shell cat VERSION_MINOR)

# Get date/time

NK_DATE := $(shell date -u -Iminute)
NK_YEAR := $(shell expr $(shell echo $(NK_DATE) | cut -b 1-4) + 0)
NK_MONTH := $(shell expr $(shell echo $(NK_DATE) | cut -b 6-7) + 0)
NK_DAY := $(shell expr $(shell echo $(NK_DATE) | cut -b 9-10) + 0)
NK_HOUR := $(shell expr $(shell echo $(NK_DATE) | cut -b 12-13) + 0)
NK_MINUTE := $(shell expr $(shell echo $(NK_DATE) | cut -b 15-16) + 0)

# A define for the platform
NK_PLATFORM := NK_PLATFORM_AVR

# Get git hash as a string
# It is postfixed with -dirty if there are uncommitted changed; otherwise, it is postfixed with -clean.
NK_GIT_REV := \"$(shell git rev-parse HEAD)-$(shell if git diff-index --quiet HEAD --; then echo clean; else echo dirty; fi)\"

TOOL_DIR :=

CC := $(TOOL_DIR)avr-gcc
CPP := $(TOOL_DIR)avr-g++
OBJCOPY := $(TOOL_DIR)avr-objcopy

CC := avr-gcc
OBJCOPY := avr-objcopy

CFLAGS := \
   -I libnklabs/inc \
   -I config \
   -I . \
   -mmcu=$(PART) \
   -Os \
   -funsigned-char \
   -funsigned-bitfields \
   -ffunction-sections \
   -fpack-struct \
   -fshort-enums \
   -Wall \
   -Wconversion -Wunused -Wwrite-strings \
   -Wstrict-overflow=4 -Wmissing-include-dirs -Winit-self -Wcast-qual \
   -Wundef -Wlogical-op -Wmissing-declarations -Wformat \
   -Wmissing-format-attribute -Wformat-nonliteral \
   -Wswitch-enum -Wshadow -Wextra -Wformat-security \
   -std=gnu99 \
   -D$(NK_PLATFORM) -DNK_PLATFORM=\"$(NK_PLATFORM)\" -DNK_VERSION_MAJOR=$(NK_VERSION_MAJOR)  -DNK_VERSION_MINOR=$(NK_VERSION_MINOR) -DNK_YEAR=$(NK_YEAR) -DNK_MONTH=$(NK_MONTH) -DNK_DAY=$(NK_DAY) -DNK_HOUR=$(NK_HOUR) -DNK_MINUTE=$(NK_MINUTE) -DNK_GIT_REV=$(NK_GIT_REV)

OBJS := \
  main.o \
  nkuart_avr.o \
  nkarch_avr.o \
  libnklabs/src/nksched.o \
  libnklabs/src/nkprintf.o \
  libnklabs/src/nkoutfile.o \
  libnklabs/src/nkinfile.o \
  libnklabs/src/nkscan.o \
  libnklabs/src/nkcli.o \
  libnklabs/src/nkreadline.o \
  libnklabs/src/nkstring.o \
  info_cmd.o \
  basic_cmds.o \
  libnklabs/src/nkcrclib.o \
  libnklabs/src/nkmcuflash.o \
  libnklabs/src/nkdbase.o \
  libnklabs/src/nkchecked.o \
  libnklabs/src/nkdirect.o \
  libnklabs/src/nkserialize.o \
  libnklabs/src/nkymodem.o

# Keep them in a subdirectory
MOST_OBJS := $(addprefix obj/, $(OBJS))

SUBDIR_OBJS := $(MOST_OBJS) $(OBJ_DIR)version.o

$(NAME).hex : $(NAME).out
	$(OBJCOPY) -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures $(NAME).out $(NAME).hex

$(NAME).out : $(SUBDIR_OBJS) avr.ld
	$(CC) $(CFLAGS) --verbose -o $(NAME).out -Wl,-Map,$(NAME).map \
	-Wl,--start-group \
	-Wl,-lm \
	-Wl,--end-group \
	-Wl,--gc-sections \
	-T avr.ld \
	$(SUBDIR_OBJS)

# Rebuild version.o if any other file changed
$(OBJ_DIR)version.o: $(MOST_OBJS) VERSION_MAJOR VERSION_MINOR

# Add to print verbose linker information
#	-Wl,--verbose \

# Commmands / phony targets

.PHONY: help
help:
	@echo
	@echo "make                     Build $(NAME).hex"
	@echo
	@echo "make flash               Program flash memory by running avrdude"
	@echo
	@echo "make clean               Delete intermediate files"
	@echo
	@echo "make cleaner             Delete intermediate files and final image"
	@echo

.PHONY: clean
clean:
	rm -rf $(OBJ_DIR)

.PHONY: cleaner
cleaner: clean
	rm -f $(NAME).out $(NAME).map $(NAME).hex

.PHONY: flash
flash: $(NAME).hex
	avrdude $(AVRDUDE_OPTS) -U flash:w:$(NAME).hex

.PHONY: verify
verify: $(NAME).hex
	avrdude $(AVRDUDE_OPTS) -U flash:w:$(NAME).hex


# include dependancy files if they exist
-include $(SUBDIR_OBJS:.o=.d)

# Compile and generate dependency info, C files
$(OBJ_DIR)%.o: %.c
	@echo
	@mkdir -p $(OBJ_DIR)$(shell dirname $*)
	$(CC) -c $(CFLAGS) -MT $@ -MMD -MP -MF $(OBJ_DIR)$*.d $*.c -o $(OBJ_DIR)$*.o

# Compile and generate dependency info, CPP files
$(OBJ_DIR)%.o: %.cpp
	@echo
	@mkdir -p $(OBJ_DIR)$(shell dirname $*)
	$(CPP) -c $(CFLAGS) -MT $@ -MMD -MP -MF $(OBJ_DIR)$*.d $*.cpp -o $(OBJ_DIR)$*.o

# Assemble
$(OBJ_DIR)%.o: %.S
	@echo
	@mkdir -p $(OBJ_DIR)$(shell dirname $*)
	$(CC) -c $(CFLAGS) -MT $@ -MMD -MP -MF $(OBJ_DIR)$*.d $*.S -o $(OBJ_DIR)$*.o
